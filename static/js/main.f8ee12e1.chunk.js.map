{"version":3,"sources":["App.tsx","config.ts","threeSetup/index.ts","helpers/AssetHelper.ts","hooks/useWindowSize.tsx","serviceWorker.ts","index.tsx"],"names":["frameId","ColorPalette","scene","bgColor","Scene","background","Color","setupScene","fog","THREE","windowWidth","windowHeight","camera","window","innerWidth","innerHeight","PerspectiveCamera","position","z","y","renderer","WebGLRenderer","antialias","setSize","setPixelRatio","devicePixelRatio","setupRenderer","shadowMap","enabled","type","ambientLight","set","hemisphereLight","directionalLight","castShadow","shadow","mapSize","near","far","add","me","orbitControls","OrbitControls","domElement","enablePan","maxDistance","minDistance","rotateSpeed","zoomSpeed","maxPolarAngle","Math","PI","minAzimuthAngle","maxAzimuthAngle","a","GLTFLoader","loadAsync","path","process","gltf","scale","name","traverse","node","isObject3D","lookAt","update","getNoise","x","t","SimplexNoise","noise4d","planeMaterial","color","flatShading","side","planeGeometry","i","vertices","length","v","verticesNeedUpdate","bufferPlaneGeometry","fromGeometry","terrain","rotateX","setZ","setY","receiveShadow","terrain2","clone","App","divRef","useRef","isClient","getSize","width","height","useState","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","animate","requestAnimationFrame","planeSize","console","log","render","aspect","updateProjectionMatrix","onWindowResize","divEl","current","appendChild","cancelAnimationFrame","removeChild","ref","className","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8ee12e1.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { GLTFLoader, GLTF } from \"three/examples/jsm/loaders/GLTFLoader.js\";\r\nimport { SimplexNoise } from \"three/examples/jsm/math/SimplexNoise\";\r\n\r\nimport { setupScene, setupCamera, setupRenderer } from \"./threeSetup\";\r\nimport useWindowSize from \"./hooks/useWindowSize\";\r\nimport { ColorPalette } from \"./config\";\r\n\r\n// Helpers\r\nimport { publicPath } from \"./helpers/AssetHelper\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst useHelper = false;\r\nconst moveSpeed = 3;\r\nconst mapSize = 512;\r\n\r\nlet frameId: number | null;\r\n\r\n// Setup Scene, Camera & Renderer for Three.js\r\n// For details of how to setup each component\r\n// Please check ./three/index.ts file\r\nconst scene = setupScene(ColorPalette.NIGHT_OWL_BLUE);\r\nscene.fog = new THREE.Fog(ColorPalette.NIGHT_OWL_BLUE, 1, 800);\r\nconst camera = setupCamera(window.innerWidth, window.innerHeight);\r\ncamera.position.z = 100;\r\ncamera.position.y = 0;\r\nconst renderer = setupRenderer(window.innerWidth, window.innerHeight);\r\n\r\nrenderer.shadowMap.enabled = true;\r\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n// Lights\r\nconst ambientLight = new THREE.AmbientLight(ColorPalette.LIGHT_CREAM, 0.5);\r\nambientLight.position.set(0, 50, 0);\r\n\r\nconst hemisphereLight = new THREE.HemisphereLight(\r\n  ColorPalette.LIGHT_CREAM,\r\n  ColorPalette.BLACK,\r\n  0.95\r\n);\r\nhemisphereLight.position.set(0, 100, 100);\r\n\r\nconst directionalLight = new THREE.DirectionalLight(ColorPalette.LIGHT_CREAM, 0.5);\r\ndirectionalLight.castShadow = true;\r\ndirectionalLight.position.set(-100, 100, -100);\r\n// Set up shadow properties for the light\r\ndirectionalLight.shadow.mapSize.set(mapSize, mapSize);\r\ndirectionalLight.shadow.camera.near = 0.5; // default\r\ndirectionalLight.shadow.camera.far = 500; // default\r\n\r\nscene.add(ambientLight, hemisphereLight, directionalLight);\r\n\r\n// OrbitControls\r\nconst orbitControls = new OrbitControls(camera, renderer.domElement);\r\norbitControls.enablePan = false;\r\norbitControls.maxDistance = 150;\r\norbitControls.minDistance = 50;\r\norbitControls.rotateSpeed = 0.6;\r\norbitControls.zoomSpeed = 0.8;\r\norbitControls.maxPolarAngle = Math.PI / 1.5;\r\norbitControls.minAzimuthAngle = -Math.PI / 2;\r\norbitControls.maxAzimuthAngle = Math.PI / 2;\r\n\r\nlet me: THREE.Object3D | undefined;\r\n(async () => {\r\n  const gltf = (await new GLTFLoader().loadAsync(publicPath(\"me.glb\"))) as GLTF;\r\n  me = gltf.scene;\r\n  me.scale.set(100, 100, 100);\r\n  me.position.set(0, -60, 0);\r\n  me.name = \"Hao\";\r\n  me.traverse(node => {\r\n    if (node.isObject3D) node.castShadow = true;\r\n  });\r\n  scene.add(me);\r\n  camera.lookAt(me.position);\r\n  orbitControls.update();\r\n\r\n  // SkeletonHelper\r\n  if (useHelper) {\r\n    const skeletonHelper = new THREE.SkeletonHelper(me);\r\n    scene.add(skeletonHelper);\r\n  }\r\n})();\r\n\r\n// Terrain\r\nconst planeSize = 4000;\r\nconst crossArea = 800;\r\nconst moveBackSize = -(planeSize / 2) + 2 * crossArea - planeSize;\r\nconst numSegments = 50;\r\nconst getNoise = (x: number, y: number, z: number, t: number) =>\r\n  new SimplexNoise().noise4d(x, y, z, t);\r\nconst planeMaterial = new THREE.MeshPhongMaterial({\r\n  color: ColorPalette.PANTONE_BLUE_2020,\r\n  flatShading: true,\r\n  side: THREE.DoubleSide\r\n});\r\nconst planeGeometry = new THREE.PlaneGeometry(planeSize / 1.5, planeSize, numSegments, numSegments);\r\nfor (let i = 0; i < planeGeometry.vertices.length; i++) {\r\n  const v = planeGeometry.vertices[i];\r\n  v.z = getNoise(v.x * 0.01, v.y * 0.01, v.z * 0.01, 0) * 60;\r\n  v.z += getNoise(v.x * 0.03, v.y * 0.03, v.z * 0.03, 0) * 10;\r\n  v.z += getNoise(v.x * 0.1, v.y * 0.125, v.z * 0.125, 0);\r\n}\r\nplaneGeometry.verticesNeedUpdate = true;\r\nconst bufferPlaneGeometry = new THREE.BufferGeometry().fromGeometry(planeGeometry);\r\nconst terrain = new THREE.Mesh(bufferPlaneGeometry, planeMaterial);\r\nterrain.name = \"Terrain\";\r\nterrain.rotateX(-Math.PI / 2);\r\nterrain.position.setZ(-(planeSize / 2) + crossArea);\r\nterrain.position.setY(-75);\r\nterrain.receiveShadow = true;\r\nconst terrain2 = terrain.clone();\r\nterrain2.name = \"Terrain 2\";\r\nterrain2.position.setZ(moveBackSize);\r\nterrain2.position.setY(-76);\r\nscene.add(terrain, terrain2);\r\n\r\nconst renderScene = () => renderer.render(scene, camera);\r\n\r\n// Helpers\r\nif (useHelper) {\r\n  // Lights Helper\r\n  const hemisphereLightHelper = new THREE.HemisphereLightHelper(hemisphereLight, 5);\r\n  scene.add(hemisphereLightHelper);\r\n  const directionalLightHelper = new THREE.DirectionalLightHelper(directionalLight);\r\n  scene.add(directionalLightHelper);\r\n\r\n  // AxesHelper\r\n  const axesHelper = new THREE.AxesHelper(100);\r\n  scene.add(axesHelper);\r\n}\r\n\r\nconst App = () => {\r\n  const divRef = useRef<HTMLDivElement>(null);\r\n  const { width, height } = useWindowSize();\r\n\r\n  const onWindowResize = (width: number, height: number) => {\r\n    camera.aspect = width / height;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(width, height);\r\n  };\r\n\r\n  const animate = () => {\r\n    frameId = window.requestAnimationFrame(animate);\r\n    orbitControls.update();\r\n    terrain.position.z += moveSpeed;\r\n    terrain2.position.z += moveSpeed;\r\n\r\n    if (terrain.position.z > planeSize / 2) {\r\n      console.log(`terrain move back ${moveBackSize}`);\r\n      terrain.position.z = moveBackSize;\r\n    }\r\n    if (terrain2.position.z > planeSize / 2) {\r\n      console.log(`terrain2 move back ${moveBackSize}`);\r\n      terrain2.position.z = moveBackSize;\r\n    }\r\n    renderScene();\r\n  };\r\n\r\n  const start = () => {\r\n    if (!frameId) {\r\n      frameId = requestAnimationFrame(animate);\r\n    }\r\n  };\r\n\r\n  const stop = () => {\r\n    frameId && cancelAnimationFrame(frameId);\r\n    frameId = null;\r\n  };\r\n\r\n  useEffect(() => {\r\n    onWindowResize(width, height);\r\n\r\n    start();\r\n\r\n    const divEl = divRef.current;\r\n    divEl?.appendChild(renderer.domElement);\r\n\r\n    return () => {\r\n      stop();\r\n      divEl?.removeChild(renderer.domElement);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [width, height]);\r\n\r\n  return <div ref={divRef} className=\"three-container\"></div>;\r\n};\r\n\r\nexport default App;\r\n","export const ColorPalette = {\r\n  WHITE: 0xffffff,\r\n  LIGHT_CREAM: 0xfffff7,\r\n  LIGHT_YELLOW: 0xffccaa,\r\n  PANTONE_BLUE_2020: 0x0f4c81,\r\n  NIGHT_OWL_BLUE: 0x000c1d,\r\n  BLACK: 0x000000\r\n};\r\n","import { Scene, Color, PerspectiveCamera, WebGLRenderer } from \"three\";\r\n\r\nexport const setupScene = (bgColor: string | number | Color | undefined) => {\r\n  const scene = new Scene();\r\n  scene.background = new Color(bgColor);\r\n  return scene;\r\n};\r\n\r\nexport const setupCamera = (windowWidth: number, windowHeight: number) =>\r\n  new PerspectiveCamera(75, windowWidth / windowHeight, 0.1, 1000);\r\n\r\nexport const setupRenderer = (windowWidth: number, windowHeight: number) => {\r\n  const renderer = new WebGLRenderer({ antialias: true });\r\n  renderer.setSize(windowWidth, windowHeight);\r\n  renderer.setPixelRatio(window.devicePixelRatio);\r\n  return renderer;\r\n};\r\n","export const publicPath = (path: string) => `${process.env.PUBLIC_URL}/${path}`;\r\n","// Hooks from https://usehooks.com/useWindowSize/\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default () => {\r\n  const isClient = typeof window === \"object\";\r\n\r\n  const getSize = () => {\r\n    return {\r\n      width: isClient ? window.innerWidth : 100,\r\n      height: isClient ? window.innerHeight : 100\r\n    };\r\n  };\r\n\r\n  const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      return undefined;\r\n    }\r\n\r\n    const handleResize = () => {\r\n      setWindowSize(getSize());\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  });\r\n\r\n  return windowSize;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}